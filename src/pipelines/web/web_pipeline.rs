use notify::{RecommendedWatcher, RecursiveMode, Watcher};

use crate::*;

pub const WEB_FEATURE: &str = "web";
pub const WEB_TARGET: &str = "wasm32-unknown-unknown";

/// web pipeline using wasm
pub struct WebPipeline<'a> {
    pub args: &'a mut Args,
    pub cargo_toml: &'a mut CargoToml,
}

impl WebPipeline<'_> {
    /// init args
    pub fn init(&mut self) -> Result<&mut Self> {
        let web_args = self.args.subcmd.as_web_mut()?;
        // canonicalize target dir
        web_args.target_dir = Path::new(&web_args.target_dir)
            .canonicalize()
            .with_context(|| format!("error getting absolute path for --target-dir {}", web_args.target_dir))?
            .to_str().unwrap().to_string();
        // canonicalize output dir
        web_args.output_dir = Path::new(&web_args.output_dir)
            .canonicalize()
            .with_context(|| format!("error getting absolute path for --output-dir {}", web_args.output_dir))?
            .to_str().unwrap().to_string();
        Ok(self)
    }

    /// runs commands according to args
    pub async fn run(&mut self) -> Result<()> {
        println!("building web");
        // write web feature
        {
            self.cargo_toml.add_features(vec![WEB_FEATURE.to_string()]);
            self.cargo_toml.write_to_file().await?;
        }
        // check args
        {
            let web_args = self.args.subcmd.as_web()?;
            let build_future = self.build();
            if web_args.serve {
                //join both instead of spawning a new thread
                {
                    let (build, watch) = tokio::join!(build_future, self.watch());
                    build?;
                    watch?;
                }
            } else {
                build_future.await?;
            }
            // run wasm bindgen
            self.build_bindings().await?;
        }
        Ok(())
    }

    /// run cargo build
    pub async fn build(&self) -> Result<()> {
        let web_subcmd = self.args.subcmd.as_web()?;
        let mut args = vec![
            "build",
            "--target",
            WEB_TARGET,
            "--target-dir",
            &web_subcmd.target_dir,
        ];
        if web_subcmd.release {
            args.push("--release")
        }
        exec_cmd("cargo", &args, Some(&self.args.dir), None)
            .await
            .with_context(|| format!("error running cargo to build for web"))?;
        Ok(())
    }

    /// rust wasm-bindgen on the target binary
    pub async fn build_bindings(&self) -> Result<()> {
        let web_subcmd = self.args.subcmd.as_web()?;
        // path to .wasm file generated by cargo build
        // default : target/wasm32-unknown-unknown/{release/debug}/<name>.wasm
        let wasm_file = Path::new(&web_subcmd.target_dir)
            .join(WEB_TARGET)
            .join(if web_subcmd.release {
                "release"
            } else {
                "debug"
            })
            // TODO: Get project name
            .join("web.wasm");
        exec_cmd(
            "wasm-bindgen",
            &vec![
                wasm_file.to_str().unwrap(),
                // build for web
                "--target",
                "web",
                // no type script
                "--no-typescript",
                // dir to place the assets at
                "--out-dir",
                &web_subcmd.output_dir,
            ],
            Option::<&str>::None,
            None,
        )
            .await
            .with_context(|| format!("error running cargo-bindgen on "))?;
        Ok(())
    }

    pub async fn watch(&self) -> Result<()> {
        let mut watcher: RecommendedWatcher = Watcher::new_immediate(|res| match res {
            Ok(event) => println!("event: {:?}", event),
            Err(e) => println!("watch error: {:?}", e),
        })
            .with_context(|| "Error initialising watcher")?;

        watcher
            .watch(format!("{}/src", self.args.dir), RecursiveMode::Recursive)
            .with_context(|| format!("error watching {}/src", self.args.dir))?;
        Ok(())
    }
}
